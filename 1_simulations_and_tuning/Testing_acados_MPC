import numpy as np
from matplotlib import pyplot as plt
from classes_definintion import DMPC



# Run MPC
dt = 0.1 # Time step [s]
N = 21  # Number of steps in the horizon


Tf = dt * N  # Time horizon


t_sim = 10.0  # Simulation time [s]
Nsim = int(t_sim / dt)  # Number of simulation steps
u_max = 1  # Maximum control input
u_min = -1
v_max = 0.5   # Maximum velocity
v_min = -0.5  # Minimum velocity



# Setup solver
DMPC_obj = DMPC() # instantiate the class
solver = DMPC_obj.setup_mpc_solver(Tf, N, u_max,u_min,v_max,v_min)



# produce time-varying reference
t_vec = np.linspace(0,dt * Nsim, Nsim)
t_vec_reference = np.linspace(0,dt * (Nsim+N), Nsim+N)
freq = 0.1 # [Hz]
amplitude = 0.25
v_target = 0.25
v_ref = v_target + amplitude * np.sin(freq * 2*np.pi*t_vec_reference)
# forwards integrate to get x_ref
x_ref = np.zeros(Nsim+N)

for i in range(1,Nsim+N):
    x_ref[i] = x_ref[i-1] + dt * v_ref[i-1]


x_init = np.array([0.0,-0.1]) # important to use floats here


# Simulate system for multiple steps
x_vec = np.zeros(Nsim)
v_vec = np.zeros(Nsim)
u_vec = np.zeros(Nsim)

# collect open loop trajectories
v_open_loop = np.zeros((Nsim, N+1))
x_open_loop = np.zeros((Nsim, N+1))
u_open_loop = np.zeros((Nsim, N))

# store reference trajectory
x_ref_open_loop = np.zeros((Nsim, N+1)) 
x_assumed_open_loop = np.zeros((Nsim, N+1)) 


x_current = x_init



for i in range(Nsim):
    # store current state
    v_vec[i] = x_current[0]
    x_vec[i] = x_current[1]


    # set up solver for current iteration
    x_ref_i = x_ref[i:i+N+1] # extract reference trajectory for this iteration
    x_open_loop_prev = x_open_loop[i-1,:] if i > 0 else x_ref_i # assign previous iteration open loop trajectory
    v_open_loop_prev_N = v_open_loop[i-1,N] if i > 0 else 0 # assign last stage velocity of previous iteration

    solver,x_assumed_open_loop_i = DMPC_obj.set_up_sovler_iteration(solver,N,x_ref_i,x_open_loop_prev,v_open_loop_prev_N,dt,u_min,u_max,x_current)

    # store reference trajectory
    x_ref_open_loop[i,:] = x_ref_i
    x_assumed_open_loop[i,:] = x_assumed_open_loop_i


    # Solve MPC problem
    status = solver.solve()
    if status != 0:
        print(f"MPC Solver failed at step {i} with status {status}.")
        break

    # Get optimal control input
    u0 = solver.get(0, "u")
    u_vec[i] = u0

    # collect open loop trajectories
    for k in range(N+1):
        # Get predicted states
        state = solver.get(k, "x")
        v_open_loop[i, k] = state[0]
        x_open_loop[i, k] = state[1]

    for k in range(N):
        u_open_loop[i, k] = solver.get(k, "u")


    # Simulate system forward
    x_current[0] += dt * u0
    x_current[1] += dt * x_current[0]



















# Plot results
color_limits = 'silver'
color_ref = 'dimgray'

# Create a figure with 2 subplots: one for velocity and one for position
fig, (axu, axv, axx) = plt.subplots(3, 1, figsize=(8, 6), sharex=True)

# Plot input (u) in the top subplot
axu.plot(t_vec, u_vec, label="u (acceleration)", color='orangered')
axu.plot(t_vec, u_max * np.ones(Nsim), label="u max", color=color_limits, linestyle='--')
axu.plot(t_vec, u_min * np.ones(Nsim), label="u min", color=color_limits, linestyle='--')
axu.set_xlabel('Time (s)')
axu.set_ylabel('u (m/s^2)')
axu.legend(loc='upper right')
axu.grid(True)

# Plot velocity (v) in the top subplot
axv.plot(t_vec, v_vec, label="v (velocity)", color='navy')
axv.plot(t_vec, v_max * np.ones(Nsim), label="v max", color=color_limits, linestyle='--')
axv.plot(t_vec, v_min * np.ones(Nsim), label="v min", color=color_limits, linestyle='--')
axv.plot(t_vec_reference, v_ref, label="v_ref (reference)", color=color_ref, linestyle='--')
axv.set_xlabel('Time (s)')
axv.set_ylabel('Velocity (v)')
axv.legend(loc='upper right')
axv.grid(True)

# Plot position (x) in the bottom subplot
axx.plot(t_vec, x_vec, label="x (position)", color='dodgerblue')
axx.plot(t_vec_reference, x_ref, label="x_ref (reference)", color=color_ref, linestyle='--')
axx.set_xlabel('Time (s)')
axx.set_ylabel('Position (x)')
axx.legend(loc='upper right')
axx.grid(True)


# plot the open loop predictions over the plots 
for i in range(Nsim):
    if i % (N+2) == 0:
        axu.plot(t_vec_reference[i:i+N], u_open_loop[i, :], color='k',alpha = 0.2, marker = '.' )
        axv.plot(t_vec_reference[i:i+N+1], v_open_loop[i, :], color='k',alpha = 0.2, marker = '.' )
        axx.plot(t_vec_reference[i:i+N+1], x_open_loop[i, :], color='k',alpha = 0.2, marker = '.' )
        # plot reference trajectory 
        axx.plot(t_vec_reference[i:i+N+1], x_assumed_open_loop[i, :], color='r',alpha = 0.2, marker = '.' )

    # add marker on the last prediction
    # axu.plot(t_vec_reference[i+N-1], u_open_loop[i, N-1], '.', color='k',alpha = 0.5 )
    # axv.plot(t_vec_reference[i+N-1], v_open_loop[i, N-1], '.', color='k',alpha = 0.5 )
    # axx.plot(t_vec_reference[i+N-1], x_open_loop[i, N-1], '.', color='k',alpha = 0.5 )


# Display the plot
plt.tight_layout()
plt.show()
